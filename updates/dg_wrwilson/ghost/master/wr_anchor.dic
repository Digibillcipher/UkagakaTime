//---------------------------Anchors and OnTranslate--------------------------

//This .dic file is for setting up anchor words, which are links to set conversations attached to certain words automatically. It also deals with OnTranslate, which is a fairly unique function. All text goes through OnTranslate first before it displays on your ghost, which is how it knows to turn certain words into links.
//Why should I care about anchor words, you ask? Or what can I use them for? Well, you can set up anchor words to easy explanations for things your ghost might talk about that might confuse your user. People they know, places they've been, pop culture references the user might not get, information about you the creator or the world the characters from, items in an item menu, basically any number of things. Anchor words can be a handy repository of information! Or just an easy way to set up some cheap jokes. The power is yours!

//Make sure to read the walkthrough (http://www.ashido.com/ukagaka/walkthrough.html) for more details about how to properly format ghost dialogue!
//I will reiterate that you should be editing these in Notepad++, and in particular, you should set the Language to C to properly highlight all the text. It will make things A LOT EASIER for you, trust me! It will also help you keep track of your brackets in case you forget some. If you click on a line with a bracket in Notepad++, it should highlight where the other bracket ends, or turn purple if there's no finishing bracket (which you should definitely fix!)
//It will also highlight my commented lines in green, so you'll know where they are. Any line beginning with // is a commented line that the code will not read. It's just for your reference!

//This file is very short, so don't worry! And if you aren't planning on using anchor words, you just have to delete a few things and you'll be done!

OldDefSurface : array
{
	35 //37
	24
	24
	24
	24
	2
	2
	34
	24
	24
	24
	25
	0
	24
	23
	22
	31
	31
	20
	26
	32
	32
	24
	2
	34
	25
	25
	25
	24
	24
	24
	20
	3
	32
	32
	32
	24
	24
	24
	2
	2
	2
	2
	24
	5
	6
	27
	35
	6
	6
	26
	6
	24
	24
	24
	2
	2
	20
	32
	25
	4
}

//--OnTranslate

//As I said above, OnTranslate filters through all the text your ghost displays and does whatever you specify to it. That doesn't have to just be turning things into links, it could be anything. This is a powerful function that can be used in a lot of creative ways I bet, but I wouldn't mess with it too much since you can pretty easily break stuff if you don't know what you're doing.
//If you're not interested in any anchor words, delete all the lines that start with _talk = REPLACE under OnTranslate.

OnTranslate
{
	_talk = reference0
 	_talk = REPLACE(_talk, "anMaxwell", "\_a[Maxwell]Maxwell\_a")
 	_talk = REPLACE(_talk, "anWebber", "\_a[Webber]Webber\_a")
 	_talk = REPLACE(_talk, "anNightmare Throne", "\_a[NightmareThrone]Nightmare Throne\_a")
	_talk = REPLACE(_talk, "anWretched Notebook", "\_a[WretchedNotebook]Wretched Notebook\_a")
	_talk = REPLACE(_talk, "anThe Incident", "\_a[TheIncident]The Incident\_a")
	_talk = REPLACE(_talk, "anCodex Umbra", "\_a[CodexUmbra]Codex Umbra\_a")
	_talk = REPLACE(_talk, "\0", "\0\f[name,%(currentfont)]\f[height,%(currentfontsize)]")
	_talk = REPLACE(_talk, "\1", "\1\f[name,%(kerocurrentfont)]\f[height,%(kerocurrentfontsize)]")
	
	if nowshell == "shell 2021" || nowshell == "Old Definition"
	{
		LOGGING("Old Def Shell")
		_surfaceregex = RE_GREP(_talk, '(?<=\\s\[).+?(?=\])')
		//_surfacepos = RE_GETPOS() not sure if needed
		_surfacenum = RE_GETSTR()
		foreach _surfacenum; _surface
		{
			LOGGING("ForEachLoop" + _surface)
			_oldsurface = 0
			case _surface
			{
				when 0-36
				{
					_oldsurface = _surface
				}
				others
				{
					_surfaceindex = _surface - 37
					_oldsurface = OldDefSurface[_surfaceindex]
					LOGGING(_oldsurface + ":check1")
				}
			}
			_talk = REPLACE(_talk, "\s[%(_surface)]", "\s[%(_oldsurface)]")
			LOGGING(_talk + ":check2")
		}
	}
	
	if reference1 == "" && reference2 == "" { //send input box : no event (ref2) , no special flag (ref1)
		EVAL('"' + REPLACE(_talk,'"','" + CHR(0x22) + "') + '"')
    }
    else { //event result from ghost
        TOSTR(_talk)
    }
}
	
	//Some brief explanation about what's going on in those REPLACE lines! Basically, the function looks through the script and looks for a defined word or set of words. In this case, it's "Anchor 1". It then replaces "Anchor 1" with the second set of text, "\_a[anchor1]Anchor 1\_a". \_a if you recall is the dialogue code for linking something, so this is linking the words Anchor 1 to something called anchor1 set up in the next function, OnAnchorSelect.
	//This is being used to change a word into a link, but you could conceivably use this to replace any text with any other kind of text if you wanted.

	
//--OnAnchorSelect
//OnAnchorSelect runs whenever someone clicks one of the links as specified above, or a link that begins with http://.

OnAnchorSelect
{
	if "http://" _in_ reference0 || "https://" _in_ reference0 //checking to see if the link is a web address
	{
	"\j[%(reference0)]\e" // \j is a tag that will open a specified url in the user's browser of choice. This basically just tells the ghost to open the webpage stored in reference0, which would be the address that the user just clicked. I didn't get too much into \j in the walkthrough page because I have literally never used it except here.
	}
	else //if it's NOT a web address
	{
	case reference0 //case is a unique thing that only really shows up in anchor.dic, and it basically sets up reference0 for evaluation to see if matches any of the below criteria, which are all tagged with when. You can read more about this on the coding page on the walkthrough site. You can add as many things here as you want to set up above as long as you follow the basic format.
		{
			when "Maxwell" //if the link is this value
			{
				"\0\s[29]Oh\w3 him, \s[28]I should've never trusted him, \s[31]but what's done is done, \s[25]and he's just as trapped as I am.\e"
				anchormax = 1
			}
			when "Webber" //if the link is this value
			{
				"\0\s[52]That's a bit of a long story, \s[24]I was fighting some spiders and after I destroyed their den I discovered a human skull with spider legs, \s[31]it was a terrible sight, \s[25]so I buried it the next time I went grave digging, %(scaredfidgetatyou)of course after I did that lightning struck and a half spider half child crawled out, \w8screaming ensued.\e"
				anchorweb = 1
			}
			when "NightmareThrone" //if the link is this value
			{
				"\0\s[29]That's Maxwell's throne, \s[31]or rather what binds the king to his position, \s[29]our morbid curiosity led us to swap places for a few years.\e"
				anchorthr = 1
			}
			when "WretchedNotebook"
			{
				if takingnotes == 1
				{
					"\0\s[50]This is my... not-so-scientific, notebook, that I'm writing in.\e"
				}
				else
				{
					"\0\s[38]\w6\s[59]\w7This is my... not-so-scientific, notebook.\w7\s[38]\w6%(eyedles)\e"
				}
				anchornoteb = 1
			}
			when "TheIncident"
			{
				if trust > 0
				{
					"\0\s[29]That's a, long, story. Ask me about it later.\e"
					anchorincident = 1
				}
				else
				{
					"\0\s[29]I don't trust you enough to tell you that story...\e"
				}
			}
			when "CodexUmbra"
			{
				"\0%(eyedles)That's Maxwell's book, he uses it to summon spooky shadow puppets to do his bidding.\e"
				anchorcodex = 1
			}
		}
	}
}

//Written by Zichqec https://zichqec.github.io/s-the-skeleton/
/*
This function should work in any YAYA ghost. Just copy the whole function into your ghost somewhere, and it should be applied automatically!
If you're using AYA, you can just copy over the entire if check into your normal OnTranslate function, and leave out the other lines of code.


How to write your dialogues with this processor:

This is some dialogue. Pauses will be inserted after punctuation marks, so long as there is a space after them! If you want to control the timing manually...\w8\w8\w8\w8 you can do that too. \n\nMake sure you add a space before linebreaks if you want the previous sentence to have a pause after it.\![dummy-tag] You can also purposefully not add a space (or put another tag in the way) if you want to omit the pause.

With the default setup, this would be the output:

This is some dialogue.\w8 Pauses will be inserted after punctuation marks,\w4 so long as there is a space after them!\w8 If you want to control the timing manually...\w8\w8\w8\w8 you can do that too.\w8 \n\nMake sure you add a space before linebreaks if you want the previous sentence to have a pause after it.\![dummy-tag] You can also purposefully not add a space (or put another tag in the way) if you want to omit the pause.


Pause tags are added after punctuation marks, but ONLY if that punctuation mark is followed immediately by a space. You can use this to control whether or not a pause is added at any point in your dialogue.

You can also add \![no-autopause] anywhere in a script to prevent pauses from being added in any part of the script! This is useful for things like menus.
Be careful that you don't have a comma and space combination in your sakurascript tags! As long as you write them like \![raise,OnThing,Arg 1] and not \![raise, OnThing, Arg 1], you should be fine.

You can adjust this all how you like. I also included options to handle ellipsis separately.
You'll have to be a bit mindful of how you write your dialogues, but this can make it much easier/cleaner in general!
*/
OnTranslateInternal.AutoPauses
{
	_talk = _argv[0]
	
	if "\![no-autopause]" !_in_ _talk
	{
		/*
		//Additional options if you want ellipsis to have little pauses between each dot. Personally, I think I want to do that manually, for when I want a particular flavor.
		
		_talk = REPLACE(_talk,"... ",".\w2.\w2.\w8 ") //Ellipsis
		_talk = REPLACE(_talk,"..? ",".\w2.\w2?\w8 ") //Question mark + ellipsis
		_talk = REPLACE(_talk,"..! ",".\w2.\w2!\w8 ") //Exclamation point + ellipsis
		*/
		
		_talk = REPLACE(_talk,", ",",\w4 ") //Comma
		_talk = REPLACE(_talk,". ",".\w8 ") //Period
		_talk = REPLACE(_talk,"? ","?\w8 ") //Question mark
		_talk = REPLACE(_talk,"! ","!\w8 ") //Exclamation point
		//_talk = REPLACE(_talk,"- ","-\w8 ") //Dash - This one seems to happen a lot when I don't want it, so I am commenting it out
		_talk = REPLACE(_talk,"; ",";\w4 ") //Semicolon
	}
	
	_talk
}