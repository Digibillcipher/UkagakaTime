//Zichqec!
//Possible items and their max stack numbers (and element numbers)
//This does not include static items that you or wilson always have
MaxStacks : array
{
	//Tradeable items
	20 //0 - Logs
	20 //1 - Gold
	40 //2 - Silk
	40 //3 - Rocks
	40 //4 - Morsel
	20 //5 - Meat
	20 //6 - Monster Meat
	40 //7 - Fish
	40 //8 - Ice
	40 //9 - Gears
	40 //10 - Egg
	40 //11 - Dark Petals
	40 //12 - Nitre
	
	//Craftable items
	40 //13 - Cooked Morsel
	20 //14 - Cooked Meat
	20 //15 - Cooked Monster Meat
	40 //16 - Charcoal
	20 //17 - Jerky
	40 //18 - Small Jerky
	20 //19 - Monster Jerky
	40 //20 - Nightmare Fuel
	10 //21 - Boards
	10 //22 - Cut Stone
	20 //23 - Rope
	
	//Items Wilson won't give
	//Since 40 is a ridiculous amount of a food to have I'm changing these to reasonable values
	10 //24 - Meatballs
	5 //25 - Bacon and Eggs
	40 //26 - Berries
	5 //27 - Butter Muffin
	5 //28 - Froggle Bunwich
	10 //29 - Honey Nuggets
	5 //30 - Pierogi
	5 //31 - Monster Lasagna
	1 //32 - Log Suit
}

ItemIndexer : array
{
	"log"
	"gold"
	"silk"
	"rock"
	"morsel" //Will have to check for other types first
	"meat" //Will have to check for other types first
	"monstermeat"
	"fish"
	"ice"
	"gear"
	"egg"
	"darkpetal"
	"nitre"
	
	"cookedmorsel"
	"cookedmeat"
	"cookedmonstermeat"
	"charcoal"
	"jerky" //Will have to check for other types first
	"smalljerky"
	"monsterjerky"
	"nightmarefuel"
	"board"
	"cutstone"
	"rope"
	
	"meatball"
	"baconandegg"
	"berr" //y or ies
	"buttermuffin"
	"frogglebunwich"
	"honeynugget"
	"pierogi"
	"monsterlasagna"
	"logsuit"
}

ItemSingular : array
{
	"Log"
	"Gold"
	"Silk"
	"Rock"
	"Morsel"
	"Meat"
	"Monster Meat"
	"Fish"
	"Ice"
	"Gear"
	"Egg"
	"Dark Petal"
	"Nitre"
	
	"Cooked Morsel"
	"Cooked Meat"
	"Cooked Monster Meat"
	"Charcoal"
	"Jerky"
	"Small Jerky"
	"Monster Jerky"
	"Nightmare Fuel"
	"Board"
	"Cut Stone"
	"Rope"
	
	"Meatball"
	"Bacon and Egg"
	"Berry"
	"Butter Muffin"
	"Froggle Bunwich"
	"Honey Nugget"
	"Pierogi"
	"Monster Lasagna"
	"Log Suit"
}

ItemPlural : array
{
	"Logs"
	"Gold"
	"Silk"
	"Rocks"
	"Morsels"
	"Meat"
	"Monster Meat"
	"Fish"
	"Ice"
	"Gears"
	"Eggs"
	"Dark Petals"
	"Nitre"
	
	"Cooked Morsels"
	"Cooked Meat"
	"Cooked Monster Meat"
	"Charcoal"
	"Jerky"
	"Small Jerky"
	"Monster Jerky"
	"Nightmare Fuel"
	"Boards"
	"Cut Stones"
	"Rope"
	
	"Meatballs"
	"Bacon and Eggs"
	"Berries"
	"Butter Muffins"
	"Froggle Bunwichs"
	"Honey Nuggets"
	"Pierogi"
	"Monster Lasagna"
	"Log Suits"
}

ItemWorth : array
{
	//Tradeable items
	3 //0 - Logs
	3 //1 - Gold
	2 //2 - Silk
	2 //3 - Rocks
	2 //4 - Morsel
	3 //5 - Meat
	3 //6 - Monster Meat
	3 //7 - Fish
	2 //8 - Ice
	3 //9 - Gears
	3 //10 - Egg
	1 //11 - Dark Petals
	2 //12 - Nitre
	
	//Craftable items
	4 //13 - Cooked Morsel
	4 //14 - Cooked Meat
	4 //15 - Cooked Monster Meat
	4 //16 - Charcoal
	5 //17 - Jerky
	4 //18 - Small Jerky
	5 //19 - Monster Jerky
	3 //20 - Nightmare Fuel
	4 //21 - Boards
	3 //22 - Cut Stone
	3 //23 - Rope
	
	//Shouldn't be needed
	999 //24 - Meatballs
	999 //25 - Bacon and Eggs
	999 //26 - Berries
	999 //27 - Butter Muffin
	999 //28 - Froggle Bunwich
	999 //29 - Honey Nuggets
	999 //30 - Pierogi
	999 //31 - Monster Lasagna
	999 //32 - Log Suit
}

GenerateWilsonInventory
{
	_output = (0,0,0,0,0,0,0,0,0,0,0,0,0)
	
	//This is a list of index numbers from the MaxStacks array. So this is logs - nitre. This way you can customize which items are available without needing to duplicate that code
	_possible_items = "0,1,2,3,4,5,6,7,8,9,10,11,12"
	_tackon_items = "24,25,26,27,28,29,30,31,32"
	
	//A random number of slots to fill, from 4-7. This should always leave at least one slot open. Customize the min and max if you want
	_min = 4
	_max = 6
	_slots_to_fill = RAND(_max - _min + 1) + _min
	
	for _i = 0; _i < _slots_to_fill; _i++
	{
		_item = TOINT(ANY(_possible_items)) //Pick random item
		while _output[_item] != 0; {_item = TOINT(ANY(_possible_items))} //If item is already filled, pick another
		
		_max = MaxStacks[_item] //Get max stack num
		_output[_item] = RAND(_max) + 1 //Add a random amount from 1-the max stack
	}
	
	//tack on one non-tradeable item
	_item = TOINT(ANY(_tackon_items)) //Pick random item
	_max = MaxStacks[_item] //Get max stack num
	_output[_item] = RAND(_max) + 1 //Add a random amount from 1-the max stack
	
	_output
}

//To check if Wilson's inventory is full. Returns the number of open slots. You can make another like this for the user
WilsonOpenSlots
{
	_max_slots = 15
	_perma_slots = 7 //Some of the slots are taken up by stuff that's not in the inventory array
	
	_count = _max_slots - _perma_slots
	foreach WilsonInventory; _slot
	{
		if _slot > 0; _count-- //If the slot has an item in it, increment the count
	}
	if _count < 0; _count == 0
	_count
}

GenerateUserInventory
{
	_output = (0,0,0,0,0,0,0,0,0,0,0,0,0)
	
	//This is a list of index numbers from the MaxStacks array. So this is logs - nitre. This way you can customize which items are available without needing to duplicate that code
	_possible_items = "0,1,2,3,4,5,6,7,8,9,10,11,12"
	
	//A random number of slots to fill, from 4-7. This should always leave at least one slot open. Customize the min and max if you want
	_min = 4
	_max = 6
	_slots_to_fill = RAND(_max - _min + 1) + _min
	
	for _i = 0; _i < _slots_to_fill; _i++
	{
		_item = TOINT(ANY(_possible_items)) //Pick random item
		while _output[_item] != 0; {_item = TOINT(ANY(_possible_items))} //If item is already filled, pick another
		
		_max = MaxStacks[_item] //Get max stack num
		_output[_item] = RAND(_max) + 1 //Add a random amount from 1-the max stack
	}
	_output
}

//To check if Wilson's inventory is full. Returns the number of open slots. You can make another like this for the user
UserOpenSlots
{
	_max_slots = 15
	_perma_slots = 7 //Some of the slots are taken up by stuff that's not in the inventory array
	
	_count = _max_slots - _perma_slots
	foreach UserInventory; _slot
	{
		if _slot > 0; _count-- //If the slot has an item in it, increment the count
	}
	if _count < 0; _count == 0
	_count
}

DisplayInventory
{
	//wilsoninventory = GenerateWilsonInventory //Generate an inventory. You'd want to put this in your OnBoot or whatever, and save it to a global variable so it stays as it is until he closes and you generate a new one
	//survivorinventory = GenerateUserInventory
	
	"\0%(whwr)%(eyedles)\b2\_q\![no-autopause]\![set,autoscroll,disable]\![close,inputbox,__SYSTEM_ALL_INPUT__]\*"
	--
	"\f[bold,true]Wilson's Inventory:\f[bold,false]\n\n[half]"
	--
	"Some Twigs, "
	--
	"Grass, "
	--
	"and Flint, "
	--
	"the Wretched Notebook, "
	--
	"a Wretched Spear, "
	--
	if garland == 1; "a Feather Pencil, and the Garland. "; else; "and a Feather Pencil. "
	--
	"As well as "
	--
	ListWilsonInventory
	--
	"\n\n[half]\f[bold,true]Your Inventory:\f[bold,false]\n\n[half]"
	--
	ListUserInventory
	--
	if garland == 0; "some Grass, and a Garland."; else; "and some Grass."
	--
	"\n\n[half]\![*]\q[Trade,wantrade]"
	--
	if username == "Digi" || username == "Dev"; "\n\![*]\q[Refresh Items,refreshtrades]"
	--
	"\n\![*]\q[Go back,BACKTOMENU]"
	--
	"\n\![*]\q[Nevermind,CANCEL]\e"
}

Select.refreshtrades
{
	OnFreshTrades
	DisplayInventory
}

OnWrnotebook
{
	"\0\s[29]That's, \f[italic,1]mine.\f[italic,0]"
	--
	"%(whwr)\n\n[half]\![*]\q[Go back,viewinv]"
	--
	"\n\![*]\q[Nevermind,CANCEL]\e"
}

Select.wantrade
{
	"\0\s[89]You want to trade with me? \w8\w8\*"
	--
	//"Please tell me what items and amounts, for example:\n"
	//--
	//"\![open,inputbox,OnWantrade,-1,%(RAND(21)+2) Rocks for %(RAND(11)+2) Morsels]"
	//"\![open,inputbox,OnWantrade,-1,%(RAND(21)+2) Silk for %(RAND(8)+2) Gold]"
	//"\![open,inputbox,OnWantrade,-1,%(RAND(8)+2) Fish for %(RAND(8)+2) Eggs]"
	//--
	//"\w8\w8\w8\w8Put what you want from me first, and what you're offering second."
	"What are you offering?\![close,inputbox,__SYSTEM_ALL_INPUT__]\![open,inputbox,OnWantrade,-1]"
	--
	"\w8\w8\w8\s[29] Please don't tell me the value in Longhand, or Roman numerals..."
	--
	"%(whwr)\b2\_q\![no-autopause]\![set,autoscroll,disable]"
	--
	"\n\n[half]\f[bold,true]Your Inventory:\f[bold,false]\n\n[half]"
	--
	ListUserInventory
	--
	if garland == 0; "some Grass, and a Garland."; else; "and some Grass."
	--
	"\n\n[half]\![*]\q[Go back,viewinv]"
	--
	"\n\![*]\q[Nevermind,CANCEL]\e"
}

Select.wantrading
{
	"\0\s[89]What are you offering?\![close,inputbox,__SYSTEM_ALL_INPUT__]\![open,inputbox,OnWantrade,-1]"
	--
	"\w8\w8\w8\s[29] Please don't tell me the value in Longhand, or Roman numerals..."
	--
	"%(whwr)\b2\_q\![no-autopause]\![set,autoscroll,disable]"
	--
	"\n\n[half]\f[bold,true]Your Inventory:\f[bold,false]\n\n[half]"
	--
	ListUserInventory
	--
	if garland == 0; "some Grass, and a Garland."; else; "and some Grass."
	--
	"\n\n[half]\![*]\q[Go back,viewinv]"
	--
	"\n\![*]\q[Nevermind,CANCEL]\e"
}

OnWantrade
{
	_tradefirsthalf = reference0
	_tradefirsthalf = TOLOWER(_tradefirsthalf)
	_tradefirsthalf = REPLACE(_tradefirsthalf," ","") //removes spaces
	_tradefirsthalf = REPLACE(_tradefirsthalf,".","") //removes periods
	_tradefirsthalf = REPLACE(_tradefirsthalf,"-","") //removes dashes
	
	//Validate First Half
	if "diary" _in_ _tradefirsthalf
	{
		OnCalledDiary
	}
	elseif "note" _in_ _tradefirsthalf || "book" _in_ _tradefirsthalf || "tome" _in_ _tradefirsthalf || "journal" _in_ _tradefirsthalf
	{
		OnWrnotebook
	}
	elseif "spear" _in_ _tradefirsthalf || "suit" _in_ _tradefirsthalf || "armor" _in_ _tradefirsthalf || "armour" _in_ _tradefirsthalf ||  "feather" _in_ _tradefirsthalf || "pen" _in_ _tradefirsthalf
	{
		OnNotYours
	}
	else
	{
		firstdigits = OnGetDigits(_tradefirsthalf)
		_string = OnRemoveDigits(_tradefirsthalf)
		if firstdigits == "no digits" && _string == "no string"
		{
			"\0\s[89]You didn't specify what you have to trade."
			--
			"%(whwr)\n\n[half]\![*]\q[Go back,viewinv]"
			--
			"\n\![*]\q[Nevermind,CANCEL]\e"
		}
		elseif _string == "no string"
		{
			"\0\s[89]You didn't specify what you have to trade."
			--
			"%(whwr)\n\n[half]\![*]\q[Go back,viewinv]"
			--
			"\n\![*]\q[Nevermind,CANCEL]\e"
		}
		elseif firstdigits == "no digits"
		{
			"\0\s[89]You didn't specify the amount."
			--
			"%(whwr)\n\n[half]\![*]\q[Go back,viewinv]"
			--
			"\n\![*]\q[Nevermind,CANCEL]\e"
		}
		else
		{
			if "monstermeat" _in_ _string
			{
				firstitemindex = 6
			}
			elseif "cookedmorsel" _in_ _string
			{
				firstitemindex = 13
			}
			elseif "cookedmeat" _in_ _string
			{
				firstitemindex = 14
			}
			elseif "cookedmonstermeat" _in_ _string
			{
				firstitemindex = 15
			}
			elseif "smalljerky" _in_ _string
			{
				firstitemindex = 18
			}
			elseif "monsterjerky" _in_ _string
			{
				firstitemindex = 19
			}
			elseif "meatball" _in_ _string
			{
				firstitemindex = 24
			}
			elseif "baconandegg" _in_ _string
			{
				firstitemindex = 25
			}
			elseif "grass" _in_ _string
			{
				firstitemindex = 999
			}
			else
			{
				firstitemindex = OnIndexInString(_string,ItemIndexer)
			}
			
			firstamounthave = survivorinventory[firstitemindex]
			
			if firstamounthave == 1
			{
				firstitem = ItemSingular[firstitemindex]
			}
			else
			{
				firstitem = ItemPlural[firstitemindex]
			}
			
			if firstamounthave
			{
				if firstdigits > firstamounthave
				{
					"\0\s[89]You only have %(firstamounthave) %(firstitem), do you want to trade all of them?"
					--
					"%(whwr)\n\n[half]"
					--
					"\n\![*]\q[Yes,yesallitems]"
					--
					"\n\![*]\q[Go back,wantrading]"
					--
					"\n\![*]\q[Nevermind,CANCEL]\e"
				}
				else
				{
					OnContinueTrade
				}
			}
			elseif firstitemindex == 999
			{
				"\0\s[89]I don't need any more grass %(username)."
				--
				"%(whwr)\n\n[half]\![*]\q[Go back,viewinv]"
				--
				"\n\![*]\q[Nevermind,CANCEL]\e"
			}
			else
			{
				"\0\s[89]You don't have any of those."
				--
				"%(whwr)\n\n[half]\![*]\q[Go back,viewinv]"
				--
				"\n\![*]\q[Nevermind,CANCEL]\e"
			}
		}
	}
}

Select.yesallitems
{
	firstdigits = firstamounthave
	OnContinueTrade
}

OnContinueTrade
{
	if firstdigits == 1
	{
		firstitem = ItemSingular[firstitemindex]
	}
	if firstdigits == 1
	{
		"\0%(eyedles)Alright, you're giving me 1 %(firstitem), \w8\w8what do you want for it?\*\![open,inputbox,OnWantrade2,-1]"
	}
	else
	{
		"\0%(eyedles)Alright, you're giving me %(firstdigits) %(firstitem), \w8\w8what do you want for them?\*\![open,inputbox,OnWantrade2,-1]"
	}
	--
	"%(whwr)\b2\_q\![no-autopause]\![set,autoscroll,disable]"
	--
	"\n\n[half]\f[bold,true]Wilson's Inventory:\f[bold,false]\n\n[half]"
	--
	"Some Twigs, "
	--
	"Grass, "
	--
	"and Flint, "
	--
	"the Wretched Notebook, "
	--
	"a Wretched Spear, "
	--
	if garland == 1; "a Feather Pencil, and the Garland. "; else; "and a Feather Pencil. "
	--
	"As well as "
	--
	ListWilsonInventory
	--
	"\n\n[half]\![*]\q[Go back,wantrading]"
	--
	"\n\![*]\q[Nevermind,CANCEL]\e"
}

OnWantrade2
{
	_tradenexthalf = reference0
	_tradenexthalf = TOLOWER(_tradenexthalf)
	_tradenexthalf = REPLACE(_tradenexthalf," ","") //removes spaces
	_tradenexthalf = REPLACE(_tradenexthalf,".","") //removes periods
	_tradenexthalf = REPLACE(_tradenexthalf,"-","") //removes dashes
	
	//Validate Second Half
	if "diary" _in_ _tradenexthalf
	{
		OnCalledDiary
	}
	elseif "note" _in_ _tradenexthalf || "book" _in_ _tradenexthalf || "tome" _in_ _tradenexthalf || "journal" _in_ _tradenexthalf
	{
		OnWrnotebook
	}
	elseif "spear" _in_ _tradenexthalf || "suit" _in_ _tradenexthalf || "armor" _in_ _tradenexthalf || "armour" _in_ _tradenexthalf
	{
		OnBattleEquipment
	}
	elseif "feather" _in_ _tradenexthalf || "pen" _in_ _tradenexthalf
	{
		OnFeatherPencil
	}
	else
	{
		nextdigits = OnGetDigits(_tradenexthalf)
		_string = OnRemoveDigits(_tradenexthalf)
		if nextdigits == "no digits" && _string == "no string"
		{
			"\0\s[89]You didn't specify what you want from me."
			--
			"%(whwr)\n\n[half]\![*]\q[Go back,viewinv]"
			--
			"\n\![*]\q[Nevermind,CANCEL]\e"
		}
		elseif _string == "no string"
		{
			"\0\s[89]You didn't specify what you want from me."
			--
			"%(whwr)\n\n[half]\![*]\q[Go back,viewinv]"
			--
			"\n\![*]\q[Nevermind,CANCEL]\e"
		}
		elseif nextdigits == "no digits"
		{
			"\0\s[89]You didn't specify the amount."
			--
			"%(whwr)\n\n[half]\![*]\q[Go back,viewinv]"
			--
			"\n\![*]\q[Nevermind,CANCEL]\e"
		}
		else
		{
			if "monstermeat" _in_ _string
			{
				nextitemindex = 6
			}
			elseif "cookedmorsel" _in_ _string
			{
				nextitemindex = 13
			}
			elseif "cookedmeat" _in_ _string
			{
				nextitemindex = 14
			}
			elseif "cookedmonstermeat" _in_ _string
			{
				nextitemindex = 15
			}
			elseif "smalljerky" _in_ _string
			{
				nextitemindex = 18
			}
			elseif "monsterjerky" _in_ _string
			{
				nextitemindex = 19
			}
			elseif "meatball" _in_ _string
			{
				nextitemindex = 24
			}
			elseif "baconandegg" _in_ _string
			{
				nextitemindex = 25
			}
			elseif "grass" _in_ _string
			{
				nextitemindex = 999
			}
			elseif "flint" _in_ _string
			{
				nextitemindex = 9999
			}
			elseif "twigs" _in_ _string
			{
				nextitemindex = 9999
			}
			else
			{
				nextitemindex = OnIndexInString(_string,ItemIndexer)
			}
			
			wilsonamounthave = wilsoninventory[nextitemindex]
			
			if wilsonamounthave == 1
			{
				nextitem = ItemSingular[nextitemindex]
			}
			else
			{
				nextitem = ItemPlural[nextitemindex]
			}
			
			if firstitemindex == nextitemindex
			{
				"\0\s[29]Just what are you trying to pull here?"
				--
				"%(whwr)\n\n[half]\![*]\q[Go back,viewinv]"
				--
				"\n\![*]\q[Nevermind,CANCEL]\e"
			}
			elseif wilsonamounthave
			{
				case nextitemindex
				{
					when 0-12
					{
						if nextdigits > wilsonamounthave
						{
							"\0\s[89]I only have %(wilsonamounthave) %(nextitem), do you want all of them?"
							--
							"%(whwr)\n\n[half]"
							--
							"\n\![*]\q[Yes,yesallitemstwo]"
							--
							"\n\![*]\q[Go back,wantrading]"
							--
							"\n\![*]\q[Nevermind,CANCEL]\e"
						}
						else
						{
							OnContinueTradeTwo
						}
					}
					when 13-23
					{
						if nextdigits == 1 || wilsonamounthave == 1
						{
							"\0\s[89]What are you going to do with that anyway?"
						}
						else
						{
							"\0\s[89]What are you going to do with those anyway?"
						}
						--
						"%(whwr)\n\n[half]\![*]\q[Go back,viewinv]"
						--
						"\n\![*]\q[Nevermind,CANCEL]\e"
					}
					when 24-30
					{
						if nextdigits == 1 || wilsonamounthave == 1
						{
							"\0\s[29]Hey, I'm going to eat that."
						}
						else
						{
							"\0\s[29]Hey, I'm going to eat those."
						}
						--
						"%(whwr)\n\n[half]\![*]\q[Go back,viewinv]"
						--
						"\n\![*]\q[Nevermind,CANCEL]\e"
					}
					when 31
					{
						"\0\s[29]Don't question it."
						--
						"%(whwr)\n\n[half]\![*]\q[Go back,viewinv]"
						--
						"\n\![*]\q[Nevermind,CANCEL]\e"
					}
				}
			}
			elseif nextitemindex == 999
			{
				"\0\s[89]You already have plenty of grass %(username)."
				--
				"%(whwr)\n\n[half]\![*]\q[Go back,viewinv]"
				--
				"\n\![*]\q[Nevermind,CANCEL]\e"
			}
			elseif nextitemindex == 9999
			{
				"\0\s[89]What are you going to do with those anyway?"
				--
				"%(whwr)\n\n[half]\![*]\q[Go back,viewinv]"
				--
				"\n\![*]\q[Nevermind,CANCEL]\e"
			}
			else
			{
				"\0\s[89]I don't have any of those."
				--
				"%(whwr)\n\n[half]\![*]\q[Go back,viewinv]"
				--
				"\n\![*]\q[Nevermind,CANCEL]\e"
			}
		}
	}
}

Select.yesallitemstwo
{
	nextdigits = wilsonamounthave
	OnContinueTradeTwo
}

OnContinueTradeTwo
{
	//Calculate worth
	firstitemworth = (firstdigits * ItemWorth[firstitemindex])
	nextitemworth = (nextdigits * ItemWorth[nextitemindex])
	
	if nextdigits == 1
	{
		nextitem = ItemSingular[nextitemindex]
	}
	else
	{
		nextitem = ItemPlural[nextitemindex]
	}
	
	if firstdigits == 1
	{
		firstitem = ItemSingular[firstitemindex]
	}
	else
	{
		firstitem = ItemPlural[firstitemindex]
	}
	
	if firstitemworth > nextitemworth
	{
		_check = firstitemworth - nextitemworth
		if _check <= ROUND(nextitemworth / 2)
		{
			worthit = "yes"
		}
		else
		{
			worthit = "no 1st"
		}
	}
	elseif firstitemworth < nextitemworth
	{
		_check = nextitemworth - firstitemworth
		if _check <= ROUND(firstitemworth / 2)
		{
			worthit = "yes"
		}
		else
		{
			worthit = "no 2nd"
		}
	}
	else
	{
		worthit = "equal"
	}
	
	"\0\s[24]%(nextdigits) %(nextitem) for %(firstdigits) %(firstitem)\w8.\w8.\w8.\w8.\w8"
	--
	if worthit == "equal"
	{
		"\0\s[37]Sounds good to me!"
	}
	elseif worthit == "yes"
	{
		"\0\s[53]That seems reasonable."
	}
	elseif worthit == "no 1st"
	{
		"\0\s[31]That deal sounds a bit, \s[29]too, good."
	}
	elseif worthit == "no 2nd"
	{
		"\0\s[31]That just doesn't seem worth it, \w8sorry."
	}
	--
	if worthit == "equal" || worthit == "yes"
	{
		OnTradeCheck
	}
	else
	{
		"%(whwr)\n\n[half]\![*]\q[Go back,viewinv]"
		--
		"\n\![*]\q[Nevermind,CANCEL]\e"
	}
	//"\0You want %(nextdigits) %(nextitem) worth %(nextitemworth) for %(firstdigits) %(firstitem) worth %(firstitemworth), in range? %(worthit).\e"
}

OnTradeCheck
{
	if UserOpenSlots == 0
	{
		"\w8\w8 \s[53]However, \w8you don't have anywhere to put "
		--
		if nextdigits == 1
		{
			"a %(nextitem)."
		}
		else
		{
			"%(nextitem)."
		}
		--
		"%(whwr)\n\n[half]\![*]\q[Go back,viewinv]"
		--
		"\n\![*]\q[Nevermind,CANCEL]\e"
	}
	elseif WilsonOpenSlots == 0
	{
		"\w8\w8 \s[53]However, \w8I don't have anywhere to put "
		--
		if firstdigits == 1
		{
			"a %(firstitem)."
		}
		else
		{
			"%(firstitem)."
		}
		--
		"%(whwr)\n\n[half]\![*]\q[Go back,viewinv]"
		--
		"\n\![*]\q[Nevermind,CANCEL]\e"
	}
	elseif OnUserSpaceCheck == 0
	{
		"\w8\w8 \s[53]However, \w8you don't have enough room for "
		--
		if nextdigits == 1
		{
			"a %(nextitem)."
		}
		else
		{
			"%(nextdigits) %(nextitem)."
		}
		--
		"%(whwr)\n\n[half]\![*]\q[Go back,viewinv]"
		--
		"\n\![*]\q[Nevermind,CANCEL]\e"
	}
	elseif OnWilsonSpaceCheck == 0
	{
		"\w8\w8 \s[53]However, \w8I don't have enough room for "
		--
		if firstdigits == 1
		{
			"a %(firstitem)."
		}
		else
		{
			"%(firstdigits) %(firstitem)."
		}
		--
		"%(whwr)\n\n[half]\![*]\q[Go back,viewinv]"
		--
		"\n\![*]\q[Nevermind,CANCEL]\e"
	}
	else
	{
		"%(whwr)\n\n[half]\![*]\q["
		--
		"Okay"
		"Alright"
		"Trade"
		"Confirm"
		--
		",OnDoTrade]"
		--
		"\n\![*]\q[Go back,viewinv]"
		--
		"\n\![*]\q[Nevermind,CANCEL]\e"
	}
}

OnDoTrade
{
	survivorinventory[firstitemindex] -= firstdigits //Remove items from user
	survivorinventory[nextitemindex] += nextdigits //Give items to user
	wilsoninventory[firstitemindex] += firstdigits //Give items to Wilson
	wilsoninventory[nextitemindex] -= nextdigits //Take items from Wilson
	
	tradescompleted = tradescompleted + 1
	
	"\0\s[5]Done!\e"
}

OnUserSpaceCheck
{
	_check = 1
	if UserInventory[nextitemindex] + nextdigits >= MaxStacks[nextitemindex]
	{
		_check = 0
	}
	_check
}

OnWilsonSpaceCheck
{
	_check = 1
	if UserInventory[nextitemindex] + nextdigits >= MaxStacks[nextitemindex]
	{
		_check = 0
	}
	_check
}

OnCalledDiary
{
	"\0\s[29]A: \w8\w8\f[italic,1]not a diary.\f[italic,0]\n"
	--
	"\0\s[29]B: \w8\w8That's, \f[italic,1]mine.\f[italic,0]"
	--
	"%(whwr)\n\n[half]\![*]\q[Go back,viewinv]"
	--
	"\n\![*]\q[Nevermind,CANCEL]\e"
}

OnBattleEquipment
{
	"\0\s[51]Hey, I'm going to need that."
	--
	"%(whwr)\n\n[half]\![*]\q[Go back,viewinv]"
	--
	"\n\![*]\q[Nevermind,CANCEL]\e"
}

OnFeatherPencil
{
	"\0\s[51]Hey, I need \f[italic,1]something\f[italic,0] to write with."
	--
	"%(whwr)\n\n[half]\![*]\q[Go back,viewinv]"
	--
	"\n\![*]\q[Nevermind,CANCEL]\e"
}

OnNotYours
{
	"\0\s[51]Hey, that's not yours."
	--
	"%(whwr)\n\n[half]\![*]\q[Go back,viewinv]"
	--
	"\n\![*]\q[Nevermind,CANCEL]\e"
}

OnGetDigits
{
	_digits = _argv[0]
	_digits = TRANSLATE(_digits,'a-z','')
	if _digits
	{
		_digits = TOINT(_digits)
	}
	else
	{
		_digits = "no digits"
	}
	_digits
}

OnRemoveDigits
{
	_string = _argv[0]
	_string = TRANSLATE(_string,'0-9','')
	if _string {}
	else
	{
		_string = "no string"
	}
	_string
}

OnIndexInString //Modified FindInString
{
    _string = _argv[0]
    _argv[0] = IARRAY
	_found = 0
	_index = 0
    foreach _argv; _arg
    {
        if _arg _in_ _string
        {
            _found = 1
            break
        }
		else
		{
			_index = _index + 1
		}
    }
	if _found == 0
	{
		_index = -1
	}
    _index
}

ListWilsonInventory //%(ListWilsonInventory)
{
	_display = ""
	for _i = 0; _i < ARRAYSIZE(wilsoninventory); _i++
	{
		if wilsoninventory[_i] == 1
		{
			_item = ItemSingular[_i]
			if _i > 23
			{
				_display += "and 1 %(_item)."
			}
			else
			{
				_display += "1 %(_item), "
			}
		}
		elseif wilsoninventory[_i] > 1
		{
			_item = ItemPlural[_i]
			_amount = wilsoninventory[_i]
			if _i > 23
			{
				_display += "and %(_amount) %(_item)."
			}
			else
			{
				_display += "%(_amount) %(_item), "
			}
		}
	}
	"%(_display)"
}

ListUserInventory
{
	_display = ""
	for _i = 0; _i < ARRAYSIZE(survivorinventory); _i++
	{
		if survivorinventory[_i] == 1
		{
			_item = ItemSingular[_i]
			_display += "1 %(_item), "
		}
		elseif survivorinventory[_i] > 1
		{
			_item = ItemPlural[_i]
			_amount = survivorinventory[_i]
			_display += "%(_amount) %(_item), "
		}
	}
	"%(_display)"
}









